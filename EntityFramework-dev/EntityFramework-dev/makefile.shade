
var VERSION='0.1'
var FULL_VERSION='0.1'
var AUTHORS='Microsoft Open Technologies, Inc.'

use-standard-lifecycle
k-standard-goals

#csproj-initialize target='initialize' if='(!IsMono && !IsTeamCity && E("APPVEYOR") == null) || E("IsEFPerfBuild") != null'
  var programFilesX86='${Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86)}'
  var buildProgram='${Path.Combine(programFilesX86, "MSBuild", "14.0", "Bin", "MSBuild.exe")}'
  for each='var projectFile in Files.Include("src/**/*.csproj").Include("test/**/*.csproj")'
    exec program='${buildProgram}' commandline='${projectFile} /t:GenerateProjectLockTargets /v:m /nologo /p:Configuration=${E("Configuration")}'

#publish-efci-artifacts target="test-compile" if='IsTeamCity'
  @{
    // produce .NET Core test artifacts for testing
    var testProjects = Files.Include("test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/project.json")
    .Include("test/Microsoft.EntityFrameworkCore.SqlServer.Design.FunctionalTests/project.json");
    var tfm = "netcoreapp1.1";
    foreach (var projectFile in testProjects)
    {
      var projectName = Path.GetFileName(Path.GetDirectoryName(projectFile));
      var output = Path.Combine(Directory.GetCurrentDirectory(), "artifacts/tests", projectName, tfm);
      Dotnet(string.Format("publish --configuration Release --output {0} --framework {1} {2}", output, tfm, projectFile));
    }
  }
